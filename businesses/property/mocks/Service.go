// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	property "github.com/sewakantor/sw-be/businesses/property"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddBuilding provides a mock function with given fields: data, ID
func (_m *Service) AddBuilding(data *property.Building, ID string) (*property.Building, error) {
	ret := _m.Called(data, ID)

	var r0 *property.Building
	if rf, ok := ret.Get(0).(func(*property.Building, string) *property.Building); ok {
		r0 = rf(data, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*property.Building)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*property.Building, string) error); ok {
		r1 = rf(data, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddComplex provides a mock function with given fields: data
func (_m *Service) AddComplex(data *property.Complex) (*property.Complex, error) {
	ret := _m.Called(data)

	var r0 *property.Complex
	if rf, ok := ret.Get(0).(func(*property.Complex) *property.Complex); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*property.Complex)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*property.Complex) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddReview provides a mock function with given fields: data, buildingID, usersID
func (_m *Service) AddReview(data *property.Review, buildingID string, usersID uint) (*property.Review, error) {
	ret := _m.Called(data, buildingID, usersID)

	var r0 *property.Review
	if rf, ok := ret.Get(0).(func(*property.Review, string, uint) *property.Review); ok {
		r0 = rf(data, buildingID, usersID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*property.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*property.Review, string, uint) error); ok {
		r1 = rf(data, buildingID, usersID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddUnit provides a mock function with given fields: data, buildingID
func (_m *Service) AddUnit(data *property.Unit, buildingID string) (*property.Unit, error) {
	ret := _m.Called(data, buildingID)

	var r0 *property.Unit
	if rf, ok := ret.Get(0).(func(*property.Unit, string) *property.Unit); ok {
		r0 = rf(data, buildingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*property.Unit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*property.Unit, string) error); ok {
		r1 = rf(data, buildingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApproveReview provides a mock function with given fields: ID
func (_m *Service) ApproveReview(ID string) (*property.Review, error) {
	ret := _m.Called(ID)

	var r0 *property.Review
	if rf, ok := ret.Get(0).(func(string) *property.Review); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*property.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBuilding provides a mock function with given fields: ID
func (_m *Service) DeleteBuilding(ID string) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteComplex provides a mock function with given fields: ID
func (_m *Service) DeleteComplex(ID string) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUnit provides a mock function with given fields: ID
func (_m *Service) DeleteUnit(ID string) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllBuilding provides a mock function with given fields: complexName
func (_m *Service) GetAllBuilding(complexName string) ([]property.Building, error) {
	ret := _m.Called(complexName)

	var r0 []property.Building
	if rf, ok := ret.Get(0).(func(string) []property.Building); ok {
		r0 = rf(complexName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]property.Building)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(complexName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllComplex provides a mock function with given fields: name
func (_m *Service) GetAllComplex(name string) ([]property.Complex, error) {
	ret := _m.Called(name)

	var r0 []property.Complex
	if rf, ok := ret.Get(0).(func(string) []property.Complex); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]property.Complex)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllReview provides a mock function with given fields: buildingID, limit, isApprove
func (_m *Service) GetAllReview(buildingID string, limit string, isApprove string) ([]property.Review, error) {
	ret := _m.Called(buildingID, limit, isApprove)

	var r0 []property.Review
	if rf, ok := ret.Get(0).(func(string, string, string) []property.Review); ok {
		r0 = rf(buildingID, limit, isApprove)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]property.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(buildingID, limit, isApprove)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUnit provides a mock function with given fields:
func (_m *Service) GetAllUnit() ([]property.Unit, error) {
	ret := _m.Called()

	var r0 []property.Unit
	if rf, ok := ret.Get(0).(func() []property.Unit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]property.Unit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecommendedBuilding provides a mock function with given fields: limit
func (_m *Service) GetRecommendedBuilding(limit string) ([]property.Building, error) {
	ret := _m.Called(limit)

	var r0 []property.Building
	if rf, ok := ret.Get(0).(func(string) []property.Building); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]property.Building)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSingleBuilding provides a mock function with given fields: ID
func (_m *Service) GetSingleBuilding(ID string) (*property.Building, error) {
	ret := _m.Called(ID)

	var r0 *property.Building
	if rf, ok := ret.Get(0).(func(string) *property.Building); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*property.Building)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBuilding provides a mock function with given fields: data, ID
func (_m *Service) UpdateBuilding(data *property.Building, ID string) (*property.Building, error) {
	ret := _m.Called(data, ID)

	var r0 *property.Building
	if rf, ok := ret.Get(0).(func(*property.Building, string) *property.Building); ok {
		r0 = rf(data, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*property.Building)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*property.Building, string) error); ok {
		r1 = rf(data, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComplex provides a mock function with given fields: data, ID
func (_m *Service) UpdateComplex(data *property.Complex, ID string) (*property.Complex, error) {
	ret := _m.Called(data, ID)

	var r0 *property.Complex
	if rf, ok := ret.Get(0).(func(*property.Complex, string) *property.Complex); ok {
		r0 = rf(data, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*property.Complex)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*property.Complex, string) error); ok {
		r1 = rf(data, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
