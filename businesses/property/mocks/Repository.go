// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	property "github.com/sewakantor/sw-be/businesses/property"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// ApproveReview provides a mock function with given fields: ID
func (_m *Repository) ApproveReview(ID uint) (*property.Review, error) {
	ret := _m.Called(ID)

	var r0 *property.Review
	if rf, ok := ret.Get(0).(func(uint) *property.Review); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*property.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBuilding provides a mock function with given fields: ID
func (_m *Repository) DeleteBuilding(ID uint) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteComplex provides a mock function with given fields: ID
func (_m *Repository) DeleteComplex(ID uint64) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUnit provides a mock function with given fields: ID
func (_m *Repository) DeleteUnit(ID uint) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllBuilding provides a mock function with given fields: complexName
func (_m *Repository) GetAllBuilding(complexName string) ([]property.Building, error) {
	ret := _m.Called(complexName)

	var r0 []property.Building
	if rf, ok := ret.Get(0).(func(string) []property.Building); ok {
		r0 = rf(complexName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]property.Building)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(complexName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllComplex provides a mock function with given fields: name
func (_m *Repository) GetAllComplex(name string) ([]property.Complex, error) {
	ret := _m.Called(name)

	var r0 []property.Complex
	if rf, ok := ret.Get(0).(func(string) []property.Complex); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]property.Complex)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllReview provides a mock function with given fields: buildingID, limit, isApprove
func (_m *Repository) GetAllReview(buildingID uint, limit uint, isApprove bool) ([]property.Review, error) {
	ret := _m.Called(buildingID, limit, isApprove)

	var r0 []property.Review
	if rf, ok := ret.Get(0).(func(uint, uint, bool) []property.Review); ok {
		r0 = rf(buildingID, limit, isApprove)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]property.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, bool) error); ok {
		r1 = rf(buildingID, limit, isApprove)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUnit provides a mock function with given fields:
func (_m *Repository) GetAllUnit() ([]property.Unit, error) {
	ret := _m.Called()

	var r0 []property.Unit
	if rf, ok := ret.Get(0).(func() []property.Unit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]property.Unit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildingByID provides a mock function with given fields: ID
func (_m *Repository) GetBuildingByID(ID uint) (*property.Building, error) {
	ret := _m.Called(ID)

	var r0 *property.Building
	if rf, ok := ret.Get(0).(func(uint) *property.Building); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*property.Building)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComplexByID provides a mock function with given fields: ID
func (_m *Repository) GetComplexByID(ID uint64) (*property.Complex, error) {
	ret := _m.Called(ID)

	var r0 *property.Complex
	if rf, ok := ret.Get(0).(func(uint64) *property.Complex); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*property.Complex)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComplexByName provides a mock function with given fields: name
func (_m *Repository) GetComplexByName(name string) (*property.Complex, error) {
	ret := _m.Called(name)

	var r0 *property.Complex
	if rf, ok := ret.Get(0).(func(string) *property.Complex); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*property.Complex)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecommendedBuilding provides a mock function with given fields: limit
func (_m *Repository) GetRecommendedBuilding(limit int) ([]property.Building, error) {
	ret := _m.Called(limit)

	var r0 []property.Building
	if rf, ok := ret.Get(0).(func(int) []property.Building); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]property.Building)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSingleBuilding provides a mock function with given fields: ID
func (_m *Repository) GetSingleBuilding(ID uint) (*property.Building, error) {
	ret := _m.Called(ID)

	var r0 *property.Building
	if rf, ok := ret.Get(0).(func(uint) *property.Building); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*property.Building)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnitByID provides a mock function with given fields: ID
func (_m *Repository) GetUnitByID(ID uint) (*property.Unit, error) {
	ret := _m.Called(ID)

	var r0 *property.Unit
	if rf, ok := ret.Get(0).(func(uint) *property.Unit); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*property.Unit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreBuilding provides a mock function with given fields: data
func (_m *Repository) StoreBuilding(data *property.Building) (*property.Building, error) {
	ret := _m.Called(data)

	var r0 *property.Building
	if rf, ok := ret.Get(0).(func(*property.Building) *property.Building); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*property.Building)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*property.Building) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreComplex provides a mock function with given fields: data
func (_m *Repository) StoreComplex(data *property.Complex) (*property.Complex, error) {
	ret := _m.Called(data)

	var r0 *property.Complex
	if rf, ok := ret.Get(0).(func(*property.Complex) *property.Complex); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*property.Complex)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*property.Complex) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreReview provides a mock function with given fields: data
func (_m *Repository) StoreReview(data *property.Review) (*property.Review, error) {
	ret := _m.Called(data)

	var r0 *property.Review
	if rf, ok := ret.Get(0).(func(*property.Review) *property.Review); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*property.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*property.Review) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreUnit provides a mock function with given fields: data
func (_m *Repository) StoreUnit(data *property.Unit) (*property.Unit, error) {
	ret := _m.Called(data)

	var r0 *property.Unit
	if rf, ok := ret.Get(0).(func(*property.Unit) *property.Unit); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*property.Unit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*property.Unit) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBuilding provides a mock function with given fields: data, ID
func (_m *Repository) UpdateBuilding(data *property.Building, ID uint) (*property.Building, error) {
	ret := _m.Called(data, ID)

	var r0 *property.Building
	if rf, ok := ret.Get(0).(func(*property.Building, uint) *property.Building); ok {
		r0 = rf(data, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*property.Building)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*property.Building, uint) error); ok {
		r1 = rf(data, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComplex provides a mock function with given fields: data, ID
func (_m *Repository) UpdateComplex(data *property.Complex, ID uint64) (*property.Complex, error) {
	ret := _m.Called(data, ID)

	var r0 *property.Complex
	if rf, ok := ret.Get(0).(func(*property.Complex, uint64) *property.Complex); ok {
		r0 = rf(data, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*property.Complex)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*property.Complex, uint64) error); ok {
		r1 = rf(data, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
